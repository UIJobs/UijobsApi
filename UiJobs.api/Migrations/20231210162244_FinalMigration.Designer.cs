// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UIJobsAPI.Data;

#nullable disable

namespace UijobsApi.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20231210162244_FinalMigration")]
    partial class FinalMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("UIJobsAPI.Models.Beneficio", b =>
                {
                    b.Property<int>("idBeneficio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idBeneficio"));

                    b.Property<string>("nomeBeneficio")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("idBeneficio");

                    b.ToTable("Beneficio");

                    b.HasData(
                        new
                        {
                            idBeneficio = 1,
                            nomeBeneficio = "Assistência Médica"
                        },
                        new
                        {
                            idBeneficio = 2,
                            nomeBeneficio = "Assistência Odontológica"
                        },
                        new
                        {
                            idBeneficio = 3,
                            nomeBeneficio = "Vale-Refeição"
                        },
                        new
                        {
                            idBeneficio = 4,
                            nomeBeneficio = "Vale-Alimentação"
                        },
                        new
                        {
                            idBeneficio = 5,
                            nomeBeneficio = "Vale-Transporte"
                        },
                        new
                        {
                            idBeneficio = 6,
                            nomeBeneficio = "Auxílio Creche"
                        },
                        new
                        {
                            idBeneficio = 7,
                            nomeBeneficio = "Home Office Flexível"
                        },
                        new
                        {
                            idBeneficio = 8,
                            nomeBeneficio = "Programa de Desenvolvimento Profissional"
                        },
                        new
                        {
                            idBeneficio = 9,
                            nomeBeneficio = "Horário Flexível"
                        },
                        new
                        {
                            idBeneficio = 10,
                            nomeBeneficio = "Bônus Anual"
                        },
                        new
                        {
                            idBeneficio = 11,
                            nomeBeneficio = "Participação nos Lucros e Resultados (PLR)"
                        },
                        new
                        {
                            idBeneficio = 12,
                            nomeBeneficio = "Dias de Férias Adicionais"
                        },
                        new
                        {
                            idBeneficio = 13,
                            nomeBeneficio = "Seguro de Vida"
                        },
                        new
                        {
                            idBeneficio = 14,
                            nomeBeneficio = "Previdência Privada"
                        },
                        new
                        {
                            idBeneficio = 15,
                            nomeBeneficio = "Ginástica Laboral"
                        },
                        new
                        {
                            idBeneficio = 16,
                            nomeBeneficio = "Café da Manhã Grátis"
                        },
                        new
                        {
                            idBeneficio = 17,
                            nomeBeneficio = "Auxílio-Educação"
                        });
                });

            modelBuilder.Entity("UIJobsAPI.Models.BeneficioVaga", b =>
                {
                    b.Property<int>("idVagas")
                        .HasColumnType("int");

                    b.Property<int>("idBeneficio")
                        .HasColumnType("int");

                    b.HasKey("idVagas", "idBeneficio");

                    b.HasIndex("idBeneficio");

                    b.HasIndex("idVagas", "idBeneficio");

                    b.ToTable("BeneficioVagas");

                    b.HasData(
                        new
                        {
                            idVagas = 1,
                            idBeneficio = 3
                        },
                        new
                        {
                            idVagas = 1,
                            idBeneficio = 7
                        },
                        new
                        {
                            idVagas = 2,
                            idBeneficio = 8
                        },
                        new
                        {
                            idVagas = 2,
                            idBeneficio = 9
                        },
                        new
                        {
                            idVagas = 3,
                            idBeneficio = 2
                        },
                        new
                        {
                            idVagas = 3,
                            idBeneficio = 10
                        },
                        new
                        {
                            idVagas = 4,
                            idBeneficio = 5
                        },
                        new
                        {
                            idVagas = 4,
                            idBeneficio = 2
                        },
                        new
                        {
                            idVagas = 5,
                            idBeneficio = 10
                        },
                        new
                        {
                            idVagas = 5,
                            idBeneficio = 15
                        },
                        new
                        {
                            idVagas = 6,
                            idBeneficio = 12
                        },
                        new
                        {
                            idVagas = 6,
                            idBeneficio = 6
                        },
                        new
                        {
                            idVagas = 7,
                            idBeneficio = 15
                        },
                        new
                        {
                            idVagas = 7,
                            idBeneficio = 8
                        },
                        new
                        {
                            idVagas = 8,
                            idBeneficio = 3
                        },
                        new
                        {
                            idVagas = 8,
                            idBeneficio = 1
                        },
                        new
                        {
                            idVagas = 9,
                            idBeneficio = 9
                        },
                        new
                        {
                            idVagas = 9,
                            idBeneficio = 4
                        },
                        new
                        {
                            idVagas = 10,
                            idBeneficio = 6
                        },
                        new
                        {
                            idVagas = 10,
                            idBeneficio = 11
                        },
                        new
                        {
                            idVagas = 11,
                            idBeneficio = 11
                        },
                        new
                        {
                            idVagas = 11,
                            idBeneficio = 5
                        },
                        new
                        {
                            idVagas = 12,
                            idBeneficio = 7
                        },
                        new
                        {
                            idVagas = 12,
                            idBeneficio = 12
                        },
                        new
                        {
                            idVagas = 13,
                            idBeneficio = 4
                        },
                        new
                        {
                            idVagas = 13,
                            idBeneficio = 3
                        },
                        new
                        {
                            idVagas = 14,
                            idBeneficio = 13
                        },
                        new
                        {
                            idVagas = 14,
                            idBeneficio = 14
                        },
                        new
                        {
                            idVagas = 15,
                            idBeneficio = 1
                        },
                        new
                        {
                            idVagas = 15,
                            idBeneficio = 13
                        });
                });

            modelBuilder.Entity("UIJobsAPI.Models.Candidato", b =>
                {
                    b.Property<int>("idCandidato")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idCandidato"));

                    b.Property<DateTime>("dataNascimento")
                        .HasColumnType("datetime2");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("nome")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("nomeMae")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("idCandidato");

                    b.HasIndex("email");

                    b.ToTable("Candidato");

                    b.HasData(
                        new
                        {
                            idCandidato = 1,
                            dataNascimento = new DateTime(1995, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            email = "hungos0223@gmail.com",
                            nome = "Hugo",
                            nomeMae = "Yasmin Fonseca da Silva"
                        },
                        new
                        {
                            idCandidato = 2,
                            dataNascimento = new DateTime(1990, 7, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            email = "caio@gmail.com",
                            nome = "Caio",
                            nomeMae = "Rosana Caetano Romero"
                        },
                        new
                        {
                            idCandidato = 3,
                            dataNascimento = new DateTime(1987, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            email = "peddro@gmail.com",
                            nome = "Peddro",
                            nomeMae = "Mariestela Araujo da Silva"
                        },
                        new
                        {
                            idCandidato = 4,
                            dataNascimento = new DateTime(1992, 9, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            email = "nicole@gmail.com",
                            nome = "Nicole",
                            nomeMae = "Giovanna Nascimento Gomes"
                        },
                        new
                        {
                            idCandidato = 5,
                            dataNascimento = new DateTime(1988, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            email = "geovanna@gmail.com",
                            nome = "Geovanna",
                            nomeMae = "Islayne Bragança Ervano"
                        },
                        new
                        {
                            idCandidato = 6,
                            dataNascimento = new DateTime(1991, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            email = "yago@gmail.com",
                            nome = "Yago",
                            nomeMae = "Agostinha Araujo Rezende"
                        },
                        new
                        {
                            idCandidato = 7,
                            dataNascimento = new DateTime(1985, 8, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            email = "erika@gmail.com",
                            nome = "Erika",
                            nomeMae = "Marcy Vabo Silvino"
                        },
                        new
                        {
                            idCandidato = 8,
                            dataNascimento = new DateTime(1983, 12, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            email = "tarsi@outlook.com",
                            nome = "Tarcísio Felizardo Lopez",
                            nomeMae = "Cristiane Vidal Felizardo"
                        },
                        new
                        {
                            idCandidato = 9,
                            dataNascimento = new DateTime(1982, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            email = "rioslavanda2492@outlook.com",
                            nome = "Isaque Rios Sá",
                            nomeMae = "Neiva Negris Rios"
                        },
                        new
                        {
                            idCandidato = 10,
                            dataNascimento = new DateTime(1989, 1, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            email = "maycontwo02@gmail.com",
                            nome = "Maycon Camara Leite",
                            nomeMae = "Emanuelle Theodoro Camara"
                        });
                });

            modelBuilder.Entity("UIJobsAPI.Models.CarreiraProfissional", b =>
                {
                    b.Property<int>("sqCarreiraProfissional")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("sqCarreiraProfissional"));

                    b.Property<string>("cargo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("idCurriculo")
                        .HasColumnType("int");

                    b.Property<string>("nomeEmpresa")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("tempoFim")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("tempoInicio")
                        .HasColumnType("datetime2");

                    b.HasKey("sqCarreiraProfissional");

                    b.HasIndex("idCurriculo");

                    b.ToTable("CarreiraProfissional");

                    b.HasData(
                        new
                        {
                            sqCarreiraProfissional = 1,
                            cargo = "Gerente",
                            idCurriculo = 1,
                            nomeEmpresa = "Bradesco",
                            tempoFim = new DateTime(2022, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            tempoInicio = new DateTime(2017, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            sqCarreiraProfissional = 2,
                            cargo = "Desenvolvedor",
                            idCurriculo = 2,
                            nomeEmpresa = "Ubisoft",
                            tempoFim = new DateTime(2023, 6, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            tempoInicio = new DateTime(2018, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            sqCarreiraProfissional = 3,
                            cargo = "Analista de Banco de Dados",
                            idCurriculo = 3,
                            nomeEmpresa = "Oracle",
                            tempoFim = new DateTime(2020, 12, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            tempoInicio = new DateTime(2016, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            sqCarreiraProfissional = 4,
                            cargo = "Engenheiro de Software",
                            idCurriculo = 4,
                            nomeEmpresa = "Google",
                            tempoFim = new DateTime(2021, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            tempoInicio = new DateTime(2019, 7, 5, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            sqCarreiraProfissional = 5,
                            cargo = "Arquiteto de Soluções",
                            idCurriculo = 5,
                            nomeEmpresa = "Amazon",
                            tempoFim = new DateTime(2018, 9, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            tempoInicio = new DateTime(2015, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            sqCarreiraProfissional = 6,
                            cargo = "Especialista em Cloud Computing",
                            idCurriculo = 6,
                            nomeEmpresa = "Microsoft",
                            tempoFim = new DateTime(2022, 7, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            tempoInicio = new DateTime(2020, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            sqCarreiraProfissional = 7,
                            cargo = "Designer de Jogos",
                            idCurriculo = 7,
                            nomeEmpresa = "ChibiliKid",
                            tempoFim = new DateTime(2021, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            tempoInicio = new DateTime(2018, 6, 8, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            sqCarreiraProfissional = 8,
                            cargo = "Gerente de Projetos",
                            idCurriculo = 8,
                            nomeEmpresa = "Bradesco",
                            tempoFim = new DateTime(2022, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            tempoInicio = new DateTime(2017, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            sqCarreiraProfissional = 9,
                            cargo = "Especialista em Inovação Tecnológica",
                            idCurriculo = 9,
                            nomeEmpresa = "Tech Innovations",
                            tempoFim = new DateTime(2022, 11, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            tempoInicio = new DateTime(2019, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            sqCarreiraProfissional = 10,
                            cargo = "Analista de Sistemas",
                            idCurriculo = 10,
                            nomeEmpresa = "FutureTech",
                            tempoFim = new DateTime(2020, 6, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            tempoInicio = new DateTime(2016, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("UIJobsAPI.Models.Conhecimento", b =>
                {
                    b.Property<int>("idConhecimentos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idConhecimentos"));

                    b.Property<string>("nomeConhecimento")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("idConhecimentos");

                    b.ToTable("Conhecimentos");

                    b.HasData(
                        new
                        {
                            idConhecimentos = 1,
                            nomeConhecimento = "HTML"
                        },
                        new
                        {
                            idConhecimentos = 2,
                            nomeConhecimento = "CSS"
                        },
                        new
                        {
                            idConhecimentos = 3,
                            nomeConhecimento = "JavaScript"
                        },
                        new
                        {
                            idConhecimentos = 4,
                            nomeConhecimento = "Java"
                        },
                        new
                        {
                            idConhecimentos = 5,
                            nomeConhecimento = "C#"
                        },
                        new
                        {
                            idConhecimentos = 6,
                            nomeConhecimento = "PHP"
                        },
                        new
                        {
                            idConhecimentos = 7,
                            nomeConhecimento = "SQL"
                        },
                        new
                        {
                            idConhecimentos = 8,
                            nomeConhecimento = "React"
                        },
                        new
                        {
                            idConhecimentos = 9,
                            nomeConhecimento = "Angular"
                        },
                        new
                        {
                            idConhecimentos = 10,
                            nomeConhecimento = "Vue.js"
                        },
                        new
                        {
                            idConhecimentos = 11,
                            nomeConhecimento = "Node.js"
                        },
                        new
                        {
                            idConhecimentos = 12,
                            nomeConhecimento = "Ruby"
                        },
                        new
                        {
                            idConhecimentos = 13,
                            nomeConhecimento = "Swift"
                        },
                        new
                        {
                            idConhecimentos = 14,
                            nomeConhecimento = "C"
                        },
                        new
                        {
                            idConhecimentos = 15,
                            nomeConhecimento = "C++"
                        },
                        new
                        {
                            idConhecimentos = 16,
                            nomeConhecimento = "COBOL"
                        });
                });

            modelBuilder.Entity("UIJobsAPI.Models.Curriculo", b =>
                {
                    b.Property<int>("idCurriculo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idCurriculo"));

                    b.Property<DateTime>("dcCurriculo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("duCurriculo")
                        .HasColumnType("datetime2");

                    b.Property<int>("idCandidato")
                        .HasColumnType("int");

                    b.Property<int>("idEscolaridade")
                        .HasColumnType("int");

                    b.Property<string>("objetivo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("idCurriculo");

                    b.HasIndex("idCandidato");

                    b.HasIndex("idEscolaridade");

                    b.ToTable("Curriculo");

                    b.HasData(
                        new
                        {
                            idCurriculo = 1,
                            dcCurriculo = new DateTime(2022, 8, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            duCurriculo = new DateTime(2023, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            idCandidato = 1,
                            idEscolaridade = 2,
                            objetivo = "Meu Objetivo é ser o maior fullstack do Brasil e do mundo, estou entrando nessa empresa com conhecimentos técnicos para atingir meu objetivo"
                        },
                        new
                        {
                            idCurriculo = 2,
                            dcCurriculo = new DateTime(2022, 12, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            duCurriculo = new DateTime(2023, 6, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            idCandidato = 2,
                            idEscolaridade = 2,
                            objetivo = "Estou em busca de um emprego para desenvolver minhas habilidades em JAVA"
                        },
                        new
                        {
                            idCurriculo = 3,
                            dcCurriculo = new DateTime(2014, 6, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            duCurriculo = new DateTime(2023, 9, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            idCandidato = 3,
                            idEscolaridade = 2,
                            objetivo = "Só alcança quem começa"
                        },
                        new
                        {
                            idCurriculo = 4,
                            dcCurriculo = new DateTime(2012, 2, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            duCurriculo = new DateTime(2022, 11, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            idCandidato = 4,
                            idEscolaridade = 2,
                            objetivo = "O dinheiro não é o problema, a falta de ideias criativas para ganhá-lo que é"
                        },
                        new
                        {
                            idCurriculo = 5,
                            dcCurriculo = new DateTime(2015, 5, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            duCurriculo = new DateTime(2023, 8, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            idCandidato = 5,
                            idEscolaridade = 2,
                            objetivo = "Até agora, tenho estado a evitar a sua inevitabilidade."
                        },
                        new
                        {
                            idCurriculo = 6,
                            dcCurriculo = new DateTime(2020, 4, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            duCurriculo = new DateTime(2022, 12, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            idCandidato = 6,
                            idEscolaridade = 2,
                            objetivo = "É possível, mas achamos bastante duvidoso."
                        },
                        new
                        {
                            idCurriculo = 7,
                            dcCurriculo = new DateTime(2021, 10, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            duCurriculo = new DateTime(2021, 10, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            idCandidato = 7,
                            idEscolaridade = 2,
                            objetivo = "As pessoas devem olhar para mim para a consistência e perseverança."
                        },
                        new
                        {
                            idCurriculo = 8,
                            dcCurriculo = new DateTime(2021, 10, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            duCurriculo = new DateTime(2021, 10, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            idCandidato = 10,
                            idEscolaridade = 2,
                            objetivo = "As pessoas devem olhar para mim para a consistência e perseverança."
                        },
                        new
                        {
                            idCurriculo = 9,
                            dcCurriculo = new DateTime(2021, 10, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            duCurriculo = new DateTime(2021, 10, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            idCandidato = 9,
                            idEscolaridade = 2,
                            objetivo = "As pessoas devem olhar para mim para a consistência e perseverança."
                        },
                        new
                        {
                            idCurriculo = 10,
                            dcCurriculo = new DateTime(2009, 7, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            duCurriculo = new DateTime(2023, 6, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            idCandidato = 8,
                            idEscolaridade = 2,
                            objetivo = "O número de combinações possíveis e consequentes utilizações parece ilimitado."
                        });
                });

            modelBuilder.Entity("UIJobsAPI.Models.CurriculoConhecimento", b =>
                {
                    b.Property<int>("idCurriculo")
                        .HasColumnType("int");

                    b.Property<int>("idConhecimentos")
                        .HasColumnType("int");

                    b.Property<int>("idNivel")
                        .HasColumnType("int");

                    b.HasKey("idCurriculo", "idConhecimentos");

                    b.HasIndex("idConhecimentos");

                    b.HasIndex("idNivel");

                    b.HasIndex("idCurriculo", "idConhecimentos");

                    b.ToTable("CurriculoConhecimentos");

                    b.HasData(
                        new
                        {
                            idCurriculo = 1,
                            idConhecimentos = 1,
                            idNivel = 2
                        },
                        new
                        {
                            idCurriculo = 1,
                            idConhecimentos = 2,
                            idNivel = 3
                        },
                        new
                        {
                            idCurriculo = 2,
                            idConhecimentos = 3,
                            idNivel = 1
                        },
                        new
                        {
                            idCurriculo = 2,
                            idConhecimentos = 4,
                            idNivel = 2
                        },
                        new
                        {
                            idCurriculo = 3,
                            idConhecimentos = 5,
                            idNivel = 3
                        },
                        new
                        {
                            idCurriculo = 3,
                            idConhecimentos = 6,
                            idNivel = 1
                        },
                        new
                        {
                            idCurriculo = 4,
                            idConhecimentos = 7,
                            idNivel = 2
                        },
                        new
                        {
                            idCurriculo = 4,
                            idConhecimentos = 8,
                            idNivel = 3
                        },
                        new
                        {
                            idCurriculo = 5,
                            idConhecimentos = 9,
                            idNivel = 3
                        },
                        new
                        {
                            idCurriculo = 5,
                            idConhecimentos = 10,
                            idNivel = 1
                        },
                        new
                        {
                            idCurriculo = 6,
                            idConhecimentos = 11,
                            idNivel = 2
                        },
                        new
                        {
                            idCurriculo = 6,
                            idConhecimentos = 12,
                            idNivel = 3
                        },
                        new
                        {
                            idCurriculo = 7,
                            idConhecimentos = 13,
                            idNivel = 3
                        },
                        new
                        {
                            idCurriculo = 7,
                            idConhecimentos = 14,
                            idNivel = 1
                        },
                        new
                        {
                            idCurriculo = 8,
                            idConhecimentos = 15,
                            idNivel = 2
                        },
                        new
                        {
                            idCurriculo = 8,
                            idConhecimentos = 12,
                            idNivel = 3
                        },
                        new
                        {
                            idCurriculo = 9,
                            idConhecimentos = 13,
                            idNivel = 3
                        },
                        new
                        {
                            idCurriculo = 9,
                            idConhecimentos = 14,
                            idNivel = 1
                        },
                        new
                        {
                            idCurriculo = 10,
                            idConhecimentos = 15,
                            idNivel = 2
                        },
                        new
                        {
                            idCurriculo = 10,
                            idConhecimentos = 12,
                            idNivel = 3
                        });
                });

            modelBuilder.Entity("UIJobsAPI.Models.CurriculoIdioma", b =>
                {
                    b.Property<int>("idCurriculo")
                        .HasColumnType("int");

                    b.Property<int>("idIdiomas")
                        .HasColumnType("int");

                    b.Property<int>("idNivel")
                        .HasColumnType("int");

                    b.HasKey("idCurriculo", "idIdiomas");

                    b.HasIndex("idIdiomas");

                    b.HasIndex("idNivel");

                    b.HasIndex("idCurriculo", "idIdiomas");

                    b.ToTable("CurriculoIdiomas");

                    b.HasData(
                        new
                        {
                            idCurriculo = 1,
                            idIdiomas = 1,
                            idNivel = 2
                        },
                        new
                        {
                            idCurriculo = 1,
                            idIdiomas = 3,
                            idNivel = 3
                        },
                        new
                        {
                            idCurriculo = 2,
                            idIdiomas = 2,
                            idNivel = 1
                        },
                        new
                        {
                            idCurriculo = 2,
                            idIdiomas = 5,
                            idNivel = 5
                        },
                        new
                        {
                            idCurriculo = 3,
                            idIdiomas = 4,
                            idNivel = 2
                        },
                        new
                        {
                            idCurriculo = 3,
                            idIdiomas = 1,
                            idNivel = 3
                        },
                        new
                        {
                            idCurriculo = 4,
                            idIdiomas = 3,
                            idNivel = 1
                        },
                        new
                        {
                            idCurriculo = 4,
                            idIdiomas = 2,
                            idNivel = 4
                        },
                        new
                        {
                            idCurriculo = 5,
                            idIdiomas = 1,
                            idNivel = 4
                        },
                        new
                        {
                            idCurriculo = 5,
                            idIdiomas = 5,
                            idNivel = 5
                        },
                        new
                        {
                            idCurriculo = 6,
                            idIdiomas = 4,
                            idNivel = 1
                        },
                        new
                        {
                            idCurriculo = 6,
                            idIdiomas = 3,
                            idNivel = 2
                        },
                        new
                        {
                            idCurriculo = 7,
                            idIdiomas = 2,
                            idNivel = 5
                        },
                        new
                        {
                            idCurriculo = 7,
                            idIdiomas = 1,
                            idNivel = 3
                        },
                        new
                        {
                            idCurriculo = 8,
                            idIdiomas = 5,
                            idNivel = 1
                        },
                        new
                        {
                            idCurriculo = 8,
                            idIdiomas = 4,
                            idNivel = 4
                        },
                        new
                        {
                            idCurriculo = 9,
                            idIdiomas = 3,
                            idNivel = 5
                        },
                        new
                        {
                            idCurriculo = 9,
                            idIdiomas = 2,
                            idNivel = 2
                        },
                        new
                        {
                            idCurriculo = 10,
                            idIdiomas = 1,
                            idNivel = 3
                        },
                        new
                        {
                            idCurriculo = 10,
                            idIdiomas = 4,
                            idNivel = 1
                        });
                });

            modelBuilder.Entity("UIJobsAPI.Models.Curso", b =>
                {
                    b.Property<int>("idCursos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idCursos"));

                    b.Property<string>("DiplomaCurso")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("nomeCurso")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.HasKey("idCursos");

                    b.HasIndex("DiplomaCurso");

                    b.ToTable("Cursos");

                    b.HasData(
                        new
                        {
                            idCursos = 1,
                            DiplomaCurso = "S",
                            nomeCurso = "Ciências da Computação"
                        },
                        new
                        {
                            idCursos = 2,
                            DiplomaCurso = "S",
                            nomeCurso = "Redes e Segurança"
                        },
                        new
                        {
                            idCursos = 3,
                            DiplomaCurso = "S",
                            nomeCurso = "Banco de Dados"
                        },
                        new
                        {
                            idCursos = 4,
                            DiplomaCurso = "N",
                            nomeCurso = "Excel"
                        },
                        new
                        {
                            idCursos = 5,
                            DiplomaCurso = "N",
                            nomeCurso = "Office"
                        },
                        new
                        {
                            idCursos = 6,
                            DiplomaCurso = "S",
                            nomeCurso = "Aprender Python"
                        },
                        new
                        {
                            idCursos = 7,
                            DiplomaCurso = "N",
                            nomeCurso = "Marketing Digital"
                        },
                        new
                        {
                            idCursos = 8,
                            DiplomaCurso = "S",
                            nomeCurso = "InfraEstrutura"
                        },
                        new
                        {
                            idCursos = 9,
                            DiplomaCurso = "S",
                            nomeCurso = "World"
                        },
                        new
                        {
                            idCursos = 10,
                            DiplomaCurso = "S",
                            nomeCurso = "PowerPoint"
                        });
                });

            modelBuilder.Entity("UIJobsAPI.Models.Empresa", b =>
                {
                    b.Property<int>("idEmpresa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idEmpresa"));

                    b.Property<string>("cnpj")
                        .IsRequired()
                        .HasMaxLength(19)
                        .HasColumnType("nvarchar(19)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("idPortes")
                        .HasColumnType("int");

                    b.Property<string>("nomeFantasia")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("razaoSocial")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("idEmpresa");

                    b.HasIndex("idPortes");

                    b.ToTable("Empresa");

                    b.HasData(
                        new
                        {
                            idEmpresa = 1,
                            cnpj = "11.722.246/0001-93",
                            email = "suportes@testes.com",
                            idPortes = 2,
                            nomeFantasia = "Teste",
                            razaoSocial = "Ficticios para Testes SA"
                        },
                        new
                        {
                            idEmpresa = 2,
                            cnpj = "07.476.034/0001-04",
                            email = "edson@marciolimpeza.com",
                            idPortes = 1,
                            nomeFantasia = "Edcios Limpezas",
                            razaoSocial = "Edson e Márcio Limpeza Ltda"
                        },
                        new
                        {
                            idEmpresa = 3,
                            cnpj = "78.311.160/0001-49",
                            email = "clara@otavioassessoria.com",
                            idPortes = 2,
                            nomeFantasia = "Acessoria Jurídica do Salvador",
                            razaoSocial = "Clara e Otávio Assessoria Jurídica ME"
                        },
                        new
                        {
                            idEmpresa = 4,
                            cnpj = "66.267.347/0001-03",
                            email = "daiane@pedrocontabil.com",
                            idPortes = 3,
                            nomeFantasia = "Remus Contabil",
                            razaoSocial = "Daiane e Pedro Contábil Ltda"
                        },
                        new
                        {
                            idEmpresa = 5,
                            cnpj = "55.116.850/0001-41",
                            email = "malu@renancasanoturna.com",
                            idPortes = 1,
                            nomeFantasia = "The Noitada Malunan",
                            razaoSocial = "Malu e Renan Casa Noturna Ltda"
                        },
                        new
                        {
                            idEmpresa = 6,
                            cnpj = "87.356.417/0001-70",
                            email = "elias@mateusinformatica.com",
                            idPortes = 3,
                            nomeFantasia = "Eltias Tech",
                            razaoSocial = "Elias e Mateus Informática Ltda"
                        },
                        new
                        {
                            idEmpresa = 7,
                            cnpj = "07.139.029/0001-06",
                            email = "lorenzo@rafaelafotografias.com",
                            idPortes = 3,
                            nomeFantasia = "Photorela",
                            razaoSocial = "Lorenzo e Rafaela Fotografias Ltda"
                        },
                        new
                        {
                            idEmpresa = 8,
                            cnpj = "89.150.471/0001-90",
                            email = "manoel@alanaautomoveis.com",
                            idPortes = 2,
                            nomeFantasia = "Manoel Automóveis",
                            razaoSocial = "Manoel e Alana Locações de Automóveis Ltda"
                        },
                        new
                        {
                            idEmpresa = 9,
                            cnpj = "21.799.677/0001-01",
                            email = "benjamin@isabelfinanceira.com",
                            idPortes = 2,
                            nomeFantasia = "Benj&Isa Finaceiros",
                            razaoSocial = "Benjamin e Isabel Consultoria Financeira ME"
                        },
                        new
                        {
                            idEmpresa = 10,
                            cnpj = "53.034.779/0001-22",
                            email = "emily@giovannaautomoveis.com",
                            idPortes = 4,
                            nomeFantasia = "Metrono Auto",
                            razaoSocial = "Emily e Giovanna Locações de Automóveis ME"
                        });
                });

            modelBuilder.Entity("UIJobsAPI.Models.EnderecoCandidato", b =>
                {
                    b.Property<int>("idCandidato")
                        .HasColumnType("int");

                    b.Property<string>("bairro")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("cep")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("cidade")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("complemento")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("endereco")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("logradouro")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("numero")
                        .HasColumnType("int");

                    b.Property<string>("uf")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.HasKey("idCandidato");

                    b.HasIndex("idCandidato");

                    b.ToTable("EnderecoCandidato");

                    b.HasData(
                        new
                        {
                            idCandidato = 1,
                            bairro = "Vila Guilherme",
                            cep = "77007116",
                            cidade = "São Paulo",
                            endereco = "Alcantara",
                            logradouro = "Rua",
                            numero = 354,
                            uf = "SP"
                        },
                        new
                        {
                            idCandidato = 2,
                            bairro = "Aerolândia",
                            cep = "64601203",
                            cidade = "Picos",
                            complemento = "Apt 13 Bloco A",
                            endereco = "Projetada",
                            logradouro = "Rua",
                            numero = 28,
                            uf = "PI"
                        },
                        new
                        {
                            idCandidato = 3,
                            bairro = "Marianga",
                            cep = "49504462",
                            cidade = "Salvador",
                            endereco = "E",
                            logradouro = "Rua",
                            numero = 2242,
                            uf = "BA"
                        },
                        new
                        {
                            idCandidato = 4,
                            bairro = "Vila Lobos",
                            cep = "77020004",
                            cidade = "São Sebastião",
                            endereco = "Itau",
                            logradouro = "Avenida",
                            numero = 34,
                            uf = "MG"
                        },
                        new
                        {
                            idCandidato = 5,
                            bairro = "Liberdade",
                            cep = "69911202",
                            cidade = "São Paulo",
                            complemento = "2 Andar",
                            endereco = "Japão Liberdade",
                            logradouro = "Rua",
                            numero = 34,
                            uf = "SP"
                        },
                        new
                        {
                            idCandidato = 6,
                            bairro = "São Joaquin",
                            cep = "77804170",
                            cidade = "Lima Campos",
                            complemento = "5 Andar Bloco C",
                            endereco = "Roraima",
                            logradouro = "Avenida",
                            numero = 4343,
                            uf = "RJ"
                        },
                        new
                        {
                            idCandidato = 7,
                            bairro = "Santo Antônio",
                            cep = "69908070",
                            cidade = "Aracaju",
                            endereco = "José do Rio Preto",
                            logradouro = "Rua",
                            numero = 45,
                            uf = "SE"
                        },
                        new
                        {
                            idCandidato = 8,
                            bairro = "Novo Paraíso",
                            cep = "65140970",
                            cidade = "Aracaju",
                            complemento = "5 Andar Bloco C",
                            endereco = "Claudio Batista 122",
                            logradouro = "Rua",
                            numero = 122,
                            uf = "SE"
                        },
                        new
                        {
                            idCandidato = 9,
                            bairro = "São Joaquin",
                            cep = "15047224",
                            cidade = "Lima Campos",
                            endereco = "Alberto Belintani",
                            logradouro = "Rua",
                            numero = 734,
                            uf = "RJ"
                        },
                        new
                        {
                            idCandidato = 10,
                            bairro = "Wilson",
                            cep = "97578146",
                            cidade = "Santana do Livramento",
                            endereco = "João Flores da Cunha",
                            logradouro = "Rua",
                            numero = 666,
                            uf = "RS"
                        });
                });

            modelBuilder.Entity("UIJobsAPI.Models.EnderecoEmpresa", b =>
                {
                    b.Property<int>("idEmpresa")
                        .HasColumnType("int");

                    b.Property<string>("bairro")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("cep")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("cidade")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("complemento")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("endereco")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("logradouro")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("numero")
                        .HasColumnType("int");

                    b.Property<string>("uf")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.HasKey("idEmpresa");

                    b.HasIndex("idEmpresa");

                    b.ToTable("EnderecoEmpresa");

                    b.HasData(
                        new
                        {
                            idEmpresa = 1,
                            bairro = "Vila Ouro Verde",
                            cep = "19816070",
                            cidade = "Assis",
                            complemento = "2 Andar",
                            endereco = "José Antônio Ferreira",
                            logradouro = "Rua",
                            numero = 970,
                            uf = "SP"
                        },
                        new
                        {
                            idEmpresa = 2,
                            bairro = "Aliança",
                            cep = "09403120",
                            cidade = "Ribeirão Pires",
                            endereco = "Alvorada",
                            logradouro = "Rua",
                            numero = 613,
                            uf = "SP"
                        },
                        new
                        {
                            idEmpresa = 3,
                            bairro = "Jardim Cerqueira Leite",
                            cep = "09390300",
                            cidade = "Mauá",
                            endereco = "João Gianoni",
                            logradouro = "Rua",
                            numero = 367,
                            uf = "SP"
                        },
                        new
                        {
                            idEmpresa = 4,
                            bairro = "Parque Residencial Nova Canaã",
                            cep = "13848632",
                            cidade = "Mogi Guaçu",
                            complemento = "3 andar",
                            endereco = "Yumiko Matsuda Kurimoto",
                            logradouro = "Rua",
                            numero = 695,
                            uf = "SP"
                        },
                        new
                        {
                            idEmpresa = 5,
                            bairro = "Barreirinha",
                            cep = "82700250",
                            cidade = "Curitiba",
                            endereco = "Jean Jacques Rousseau",
                            logradouro = "Rua",
                            numero = 1132,
                            uf = "PR"
                        },
                        new
                        {
                            idEmpresa = 6,
                            bairro = "Alto de São Manoel",
                            cep = "59628150",
                            cidade = "Mossoró",
                            complemento = "1 Andar",
                            endereco = "Nono Rosado",
                            logradouro = "Rua",
                            numero = 343,
                            uf = "RN"
                        },
                        new
                        {
                            idEmpresa = 7,
                            bairro = "Pajuçara",
                            cep = "59133080",
                            cidade = "Natal",
                            endereco = "da Agulha",
                            logradouro = "Rua",
                            numero = 864,
                            uf = "RN"
                        },
                        new
                        {
                            idEmpresa = 8,
                            bairro = "São Conrado",
                            cep = "49043040",
                            cidade = "Aracaju",
                            endereco = "General João Augusto dos Reis",
                            logradouro = "Rua",
                            numero = 185,
                            uf = "SE"
                        },
                        new
                        {
                            idEmpresa = 9,
                            bairro = "Base",
                            cep = "69900007",
                            cidade = "Rio Branco",
                            complemento = "2 Andar",
                            endereco = "Feijó",
                            logradouro = "Travessa",
                            numero = 2382,
                            uf = "AC"
                        },
                        new
                        {
                            idEmpresa = 10,
                            bairro = "Centro",
                            cep = "39385971",
                            cidade = "Vista Alegre",
                            endereco = "Tiradentes",
                            logradouro = "Praça",
                            numero = 13,
                            uf = "MG"
                        });
                });

            modelBuilder.Entity("UIJobsAPI.Models.Escolaridade", b =>
                {
                    b.Property<int>("idEscolaridade")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idEscolaridade"));

                    b.Property<string>("nomeEscolaridade")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("idEscolaridade");

                    b.ToTable("Escolaridade");

                    b.HasData(
                        new
                        {
                            idEscolaridade = 1,
                            nomeEscolaridade = "Ensino Médio"
                        },
                        new
                        {
                            idEscolaridade = 2,
                            nomeEscolaridade = "Ensino Médio Prof"
                        },
                        new
                        {
                            idEscolaridade = 3,
                            nomeEscolaridade = "Técnico"
                        },
                        new
                        {
                            idEscolaridade = 4,
                            nomeEscolaridade = "Graduação Tecnológica"
                        },
                        new
                        {
                            idEscolaridade = 5,
                            nomeEscolaridade = "Graduação"
                        },
                        new
                        {
                            idEscolaridade = 6,
                            nomeEscolaridade = "Pós Graduação"
                        },
                        new
                        {
                            idEscolaridade = 7,
                            nomeEscolaridade = "Mestrado"
                        },
                        new
                        {
                            idEscolaridade = 8,
                            nomeEscolaridade = "Doutorado"
                        });
                });

            modelBuilder.Entity("UIJobsAPI.Models.FormacaoAcademica", b =>
                {
                    b.Property<int>("idFormacaoAcademica")
                        .HasColumnType("int");

                    b.Property<int>("idCurriculo")
                        .HasColumnType("int");

                    b.Property<DateTime>("dfCurso")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("diCurso")
                        .HasColumnType("datetime2");

                    b.Property<int>("idCursos")
                        .HasColumnType("int");

                    b.HasKey("idFormacaoAcademica", "idCurriculo");

                    b.HasIndex("idCurriculo");

                    b.HasIndex("idCursos");

                    b.ToTable("FormacaoAcademica");

                    b.HasData(
                        new
                        {
                            idFormacaoAcademica = 1,
                            idCurriculo = 1,
                            dfCurso = new DateTime(2007, 11, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            diCurso = new DateTime(2005, 8, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            idCursos = 1
                        },
                        new
                        {
                            idFormacaoAcademica = 2,
                            idCurriculo = 2,
                            dfCurso = new DateTime(2029, 5, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            diCurso = new DateTime(2017, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            idCursos = 2
                        },
                        new
                        {
                            idFormacaoAcademica = 3,
                            idCurriculo = 3,
                            dfCurso = new DateTime(2013, 5, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            diCurso = new DateTime(2008, 2, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            idCursos = 3
                        },
                        new
                        {
                            idFormacaoAcademica = 4,
                            idCurriculo = 4,
                            dfCurso = new DateTime(2022, 12, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            diCurso = new DateTime(2020, 1, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            idCursos = 4
                        },
                        new
                        {
                            idFormacaoAcademica = 5,
                            idCurriculo = 5,
                            dfCurso = new DateTime(2019, 5, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            diCurso = new DateTime(2017, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            idCursos = 5
                        },
                        new
                        {
                            idFormacaoAcademica = 6,
                            idCurriculo = 6,
                            dfCurso = new DateTime(2020, 9, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            diCurso = new DateTime(2020, 3, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            idCursos = 6
                        },
                        new
                        {
                            idFormacaoAcademica = 7,
                            idCurriculo = 7,
                            dfCurso = new DateTime(2024, 11, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            diCurso = new DateTime(2023, 6, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            idCursos = 7
                        },
                        new
                        {
                            idFormacaoAcademica = 8,
                            idCurriculo = 8,
                            dfCurso = new DateTime(2023, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            diCurso = new DateTime(2022, 2, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            idCursos = 8
                        },
                        new
                        {
                            idFormacaoAcademica = 9,
                            idCurriculo = 9,
                            dfCurso = new DateTime(2021, 3, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            diCurso = new DateTime(2019, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            idCursos = 9
                        },
                        new
                        {
                            idFormacaoAcademica = 10,
                            idCurriculo = 10,
                            dfCurso = new DateTime(2024, 11, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            diCurso = new DateTime(2023, 3, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            idCursos = 10
                        });
                });

            modelBuilder.Entity("UIJobsAPI.Models.Idioma", b =>
                {
                    b.Property<int>("idIdiomas")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idIdiomas"));

                    b.Property<string>("nomeIdioma")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("idIdiomas");

                    b.ToTable("Idiomas");

                    b.HasData(
                        new
                        {
                            idIdiomas = 1,
                            nomeIdioma = "Inglês"
                        },
                        new
                        {
                            idIdiomas = 2,
                            nomeIdioma = "Espanhol"
                        },
                        new
                        {
                            idIdiomas = 3,
                            nomeIdioma = "Francês"
                        },
                        new
                        {
                            idIdiomas = 4,
                            nomeIdioma = "Alemão"
                        },
                        new
                        {
                            idIdiomas = 5,
                            nomeIdioma = "Italiano"
                        },
                        new
                        {
                            idIdiomas = 6,
                            nomeIdioma = "Português"
                        },
                        new
                        {
                            idIdiomas = 7,
                            nomeIdioma = "Japonês"
                        },
                        new
                        {
                            idIdiomas = 8,
                            nomeIdioma = "Chinês"
                        },
                        new
                        {
                            idIdiomas = 9,
                            nomeIdioma = "Russo"
                        },
                        new
                        {
                            idIdiomas = 10,
                            nomeIdioma = "Árabe"
                        },
                        new
                        {
                            idIdiomas = 11,
                            nomeIdioma = "Corenao"
                        },
                        new
                        {
                            idIdiomas = 12,
                            nomeIdioma = "Holandês"
                        },
                        new
                        {
                            idIdiomas = 13,
                            nomeIdioma = "Sueco"
                        },
                        new
                        {
                            idIdiomas = 14,
                            nomeIdioma = "Dinamarquês"
                        },
                        new
                        {
                            idIdiomas = 15,
                            nomeIdioma = "Finlandês"
                        });
                });

            modelBuilder.Entity("UIJobsAPI.Models.Nivel", b =>
                {
                    b.Property<int>("idNivel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idNivel"));

                    b.Property<string>("niveisDisponiveis")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("idNivel");

                    b.ToTable("Nivel");

                    b.HasData(
                        new
                        {
                            idNivel = 1,
                            niveisDisponiveis = "Básico"
                        },
                        new
                        {
                            idNivel = 2,
                            niveisDisponiveis = "Intermediário"
                        },
                        new
                        {
                            idNivel = 3,
                            niveisDisponiveis = "Avançado"
                        },
                        new
                        {
                            idNivel = 4,
                            niveisDisponiveis = "Especialista"
                        },
                        new
                        {
                            idNivel = 5,
                            niveisDisponiveis = "Domínio"
                        });
                });

            modelBuilder.Entity("UIJobsAPI.Models.Porte", b =>
                {
                    b.Property<int>("idPortes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idPortes"));

                    b.Property<string>("tiposPortes")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("idPortes");

                    b.ToTable("Portes");

                    b.HasData(
                        new
                        {
                            idPortes = 1,
                            tiposPortes = "MicroEmpresa"
                        },
                        new
                        {
                            idPortes = 2,
                            tiposPortes = "Pequena"
                        },
                        new
                        {
                            idPortes = 3,
                            tiposPortes = "Média"
                        },
                        new
                        {
                            idPortes = 4,
                            tiposPortes = "Grande"
                        });
                });

            modelBuilder.Entity("UIJobsAPI.Models.SituacaoVaga", b =>
                {
                    b.Property<int>("idSituacaoVaga")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idSituacaoVaga"));

                    b.Property<string>("situacaoAtual")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("idSituacaoVaga");

                    b.ToTable("SituacaoVaga");

                    b.HasData(
                        new
                        {
                            idSituacaoVaga = 1,
                            situacaoAtual = "Inciada"
                        },
                        new
                        {
                            idSituacaoVaga = 2,
                            situacaoAtual = "Concluída"
                        },
                        new
                        {
                            idSituacaoVaga = 3,
                            situacaoAtual = "Suspensa"
                        },
                        new
                        {
                            idSituacaoVaga = 4,
                            situacaoAtual = "Cancelada"
                        });
                });

            modelBuilder.Entity("UIJobsAPI.Models.Vaga", b =>
                {
                    b.Property<int>("idVagas")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idVagas"));

                    b.Property<short>("cargaHoraria")
                        .HasColumnType("smallint");

                    b.Property<string>("cargo")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("descricao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("finalVigencia")
                        .HasColumnType("datetime2");

                    b.Property<int>("idEmpresa")
                        .HasColumnType("int");

                    b.Property<int>("idEscolaridade")
                        .HasColumnType("int");

                    b.Property<int>("idSituacaoVaga")
                        .HasColumnType("int");

                    b.Property<DateTime>("inicioVigencia")
                        .HasColumnType("datetime2");

                    b.Property<string>("localidade")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<float>("percAderencia")
                        .HasColumnType("real");

                    b.Property<float?>("salario")
                        .HasColumnType("real");

                    b.Property<string>("tempoSemanal")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("idVagas");

                    b.HasIndex("idEmpresa");

                    b.HasIndex("idEscolaridade");

                    b.HasIndex("idSituacaoVaga");

                    b.ToTable("Vagas");

                    b.HasData(
                        new
                        {
                            idVagas = 1,
                            cargaHoraria = (short)40,
                            cargo = "Desenvolvedor Web",
                            descricao = "Descrição da vaga 1",
                            finalVigencia = new DateTime(2023, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            idEmpresa = 1,
                            idEscolaridade = 1,
                            idSituacaoVaga = 1,
                            inicioVigencia = new DateTime(2023, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            localidade = "Cidade A",
                            percAderencia = 75f,
                            salario = 5000f,
                            tempoSemanal = "Segunda a Sexta - 9h às 18h"
                        },
                        new
                        {
                            idVagas = 2,
                            cargaHoraria = (short)35,
                            cargo = "Analista de Marketing",
                            descricao = "Descrição da vaga 2",
                            finalVigencia = new DateTime(2023, 9, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            idEmpresa = 2,
                            idEscolaridade = 2,
                            idSituacaoVaga = 2,
                            inicioVigencia = new DateTime(2023, 9, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            localidade = "Cidade B",
                            percAderencia = 25f,
                            salario = 4500f,
                            tempoSemanal = "Segunda a Sexta - 10h às 19h"
                        },
                        new
                        {
                            idVagas = 3,
                            cargaHoraria = (short)45,
                            cargo = "Engenheiro Civil",
                            descricao = "Descrição da vaga 3",
                            finalVigencia = new DateTime(2023, 9, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            idEmpresa = 3,
                            idEscolaridade = 3,
                            idSituacaoVaga = 1,
                            inicioVigencia = new DateTime(2023, 9, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            localidade = "Cidade C",
                            percAderencia = 50f,
                            salario = 6000f,
                            tempoSemanal = "Segunda a Sexta - 8h às 17h"
                        },
                        new
                        {
                            idVagas = 4,
                            cargaHoraria = (short)38,
                            cargo = "Contador",
                            descricao = "Descrição da vaga 4",
                            finalVigencia = new DateTime(2023, 9, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            idEmpresa = 4,
                            idEscolaridade = 4,
                            idSituacaoVaga = 3,
                            inicioVigencia = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            localidade = "Cidade D",
                            percAderencia = 33f,
                            salario = 5500f,
                            tempoSemanal = "Segunda a Sexta - 9h às 18h"
                        },
                        new
                        {
                            idVagas = 5,
                            cargaHoraria = (short)37,
                            cargo = "Enfermeiro",
                            descricao = "Descrição da vaga 5",
                            finalVigencia = new DateTime(2023, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            idEmpresa = 5,
                            idEscolaridade = 5,
                            idSituacaoVaga = 1,
                            inicioVigencia = new DateTime(2023, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            localidade = "Cidade E",
                            percAderencia = 75f,
                            salario = 5200f,
                            tempoSemanal = "Segunda a Sexta - 8h às 17h"
                        },
                        new
                        {
                            idVagas = 6,
                            cargaHoraria = (short)30,
                            cargo = "Designer Gráfico",
                            descricao = "Descrição da vaga 6",
                            finalVigencia = new DateTime(2023, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            idEmpresa = 6,
                            idEscolaridade = 1,
                            idSituacaoVaga = 2,
                            inicioVigencia = new DateTime(2023, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            localidade = "Cidade F",
                            percAderencia = 50f,
                            salario = 4800f,
                            tempoSemanal = "Segunda a Sexta - 10h às 19h"
                        },
                        new
                        {
                            idVagas = 7,
                            cargaHoraria = (short)32,
                            cargo = "Psicólogo",
                            descricao = "Descrição da vaga 7",
                            finalVigencia = new DateTime(2023, 9, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            idEmpresa = 7,
                            idEscolaridade = 2,
                            idSituacaoVaga = 3,
                            inicioVigencia = new DateTime(2023, 9, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            localidade = "Cidade G",
                            percAderencia = 25f,
                            salario = 5200f,
                            tempoSemanal = "Segunda a Sexta - 9h às 18h"
                        },
                        new
                        {
                            idVagas = 8,
                            cargaHoraria = (short)42,
                            cargo = "Advogado",
                            descricao = "Descrição da vaga 8",
                            finalVigencia = new DateTime(2023, 9, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            idEmpresa = 8,
                            idEscolaridade = 3,
                            idSituacaoVaga = 1,
                            inicioVigencia = new DateTime(2023, 9, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            localidade = "Cidade H",
                            percAderencia = 75f,
                            salario = 5800f,
                            tempoSemanal = "Segunda a Sexta - 8h às 17h"
                        },
                        new
                        {
                            idVagas = 9,
                            cargaHoraria = (short)36,
                            cargo = "Analista Financeiro",
                            descricao = "Descrição da vaga 9",
                            finalVigencia = new DateTime(2023, 9, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            idEmpresa = 9,
                            idEscolaridade = 4,
                            idSituacaoVaga = 2,
                            inicioVigencia = new DateTime(2023, 9, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            localidade = "Cidade I",
                            percAderencia = 25f,
                            salario = 5400f,
                            tempoSemanal = "Segunda a Sexta - 9h às 18h"
                        },
                        new
                        {
                            idVagas = 10,
                            cargaHoraria = (short)44,
                            cargo = "Médico",
                            descricao = "Descrição da vaga 10",
                            finalVigencia = new DateTime(2023, 9, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            idEmpresa = 10,
                            idEscolaridade = 5,
                            idSituacaoVaga = 3,
                            inicioVigencia = new DateTime(2023, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            localidade = "Cidade J",
                            percAderencia = 25f,
                            salario = 6200f,
                            tempoSemanal = "Segunda a Sexta - 8h às 17h"
                        },
                        new
                        {
                            idVagas = 11,
                            cargaHoraria = (short)39,
                            cargo = "Analista de Sistemas",
                            descricao = "Descrição da vaga 11",
                            finalVigencia = new DateTime(2023, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            idEmpresa = 1,
                            idEscolaridade = 1,
                            idSituacaoVaga = 1,
                            inicioVigencia = new DateTime(2023, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            localidade = "Cidade A",
                            percAderencia = 33f,
                            salario = 5400f,
                            tempoSemanal = "Segunda a Sexta - 9h às 18h"
                        },
                        new
                        {
                            idVagas = 12,
                            cargaHoraria = (short)31,
                            cargo = "Recrutador",
                            descricao = "Descrição da vaga 12",
                            finalVigencia = new DateTime(2023, 9, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            idEmpresa = 2,
                            idEscolaridade = 2,
                            idSituacaoVaga = 2,
                            inicioVigencia = new DateTime(2023, 9, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            localidade = "Cidade B",
                            percAderencia = 50f,
                            salario = 4800f,
                            tempoSemanal = "Segunda a Sexta - 10h às 19h"
                        },
                        new
                        {
                            idVagas = 13,
                            cargaHoraria = (short)47,
                            cargo = "Arquiteto",
                            descricao = "Descrição da vaga 13",
                            finalVigencia = new DateTime(2023, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            idEmpresa = 3,
                            idEscolaridade = 3,
                            idSituacaoVaga = 1,
                            inicioVigencia = new DateTime(2023, 9, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            localidade = "Cidade C",
                            percAderencia = 75f,
                            salario = 6000f,
                            tempoSemanal = "Segunda a Sexta - 8h às 17h"
                        },
                        new
                        {
                            idVagas = 14,
                            cargaHoraria = (short)40,
                            cargo = "Analista Contábil",
                            descricao = "Descrição da vaga 14",
                            finalVigencia = new DateTime(2023, 9, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            idEmpresa = 4,
                            idEscolaridade = 4,
                            idSituacaoVaga = 3,
                            inicioVigencia = new DateTime(2023, 9, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            localidade = "Cidade D",
                            percAderencia = 50f,
                            salario = 5500f,
                            tempoSemanal = "Segunda a Sexta - 9h às 18h"
                        },
                        new
                        {
                            idVagas = 15,
                            cargaHoraria = (short)37,
                            cargo = "Enfermeira Pediátrica",
                            descricao = "Descrição da vaga 15",
                            finalVigencia = new DateTime(2023, 9, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            idEmpresa = 5,
                            idEscolaridade = 5,
                            idSituacaoVaga = 1,
                            inicioVigencia = new DateTime(2023, 9, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            localidade = "Cidade E",
                            percAderencia = 25f,
                            salario = 5200f,
                            tempoSemanal = "Segunda a Sexta - 8h às 17h"
                        });
                });

            modelBuilder.Entity("UIJobsAPI.Models.VagaCandidato", b =>
                {
                    b.Property<int>("idCurriculo")
                        .HasColumnType("int");

                    b.Property<int>("idVagas")
                        .HasColumnType("int");

                    b.Property<DateTime>("dcCurriculo")
                        .HasColumnType("datetime2");

                    b.Property<float>("percAderencia")
                        .HasColumnType("real");

                    b.Property<string>("vtCandidato")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("vtEmpresa")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.HasKey("idCurriculo", "idVagas");

                    b.HasIndex("idVagas");

                    b.ToTable("VagasCandidato");
                });

            modelBuilder.Entity("UIJobsAPI.Models.VagaConhecimento", b =>
                {
                    b.Property<int>("idVagas")
                        .HasColumnType("int");

                    b.Property<int>("idConhecimentos")
                        .HasColumnType("int");

                    b.Property<int>("idNivel")
                        .HasColumnType("int");

                    b.HasKey("idVagas", "idConhecimentos");

                    b.HasIndex("idConhecimentos");

                    b.HasIndex("idNivel");

                    b.ToTable("VagasConhecimentos");

                    b.HasData(
                        new
                        {
                            idVagas = 1,
                            idConhecimentos = 2,
                            idNivel = 3
                        },
                        new
                        {
                            idVagas = 1,
                            idConhecimentos = 3,
                            idNivel = 1
                        },
                        new
                        {
                            idVagas = 2,
                            idConhecimentos = 4,
                            idNivel = 2
                        },
                        new
                        {
                            idVagas = 2,
                            idConhecimentos = 5,
                            idNivel = 3
                        },
                        new
                        {
                            idVagas = 3,
                            idConhecimentos = 6,
                            idNivel = 1
                        },
                        new
                        {
                            idVagas = 3,
                            idConhecimentos = 7,
                            idNivel = 2
                        },
                        new
                        {
                            idVagas = 4,
                            idConhecimentos = 8,
                            idNivel = 3
                        },
                        new
                        {
                            idVagas = 4,
                            idConhecimentos = 9,
                            idNivel = 3
                        },
                        new
                        {
                            idVagas = 5,
                            idConhecimentos = 10,
                            idNivel = 1
                        },
                        new
                        {
                            idVagas = 5,
                            idConhecimentos = 11,
                            idNivel = 2
                        },
                        new
                        {
                            idVagas = 6,
                            idConhecimentos = 12,
                            idNivel = 3
                        },
                        new
                        {
                            idVagas = 6,
                            idConhecimentos = 13,
                            idNivel = 3
                        },
                        new
                        {
                            idVagas = 7,
                            idConhecimentos = 14,
                            idNivel = 1
                        },
                        new
                        {
                            idVagas = 7,
                            idConhecimentos = 15,
                            idNivel = 2
                        },
                        new
                        {
                            idVagas = 8,
                            idConhecimentos = 1,
                            idNivel = 3
                        },
                        new
                        {
                            idVagas = 8,
                            idConhecimentos = 2,
                            idNivel = 1
                        },
                        new
                        {
                            idVagas = 9,
                            idConhecimentos = 3,
                            idNivel = 2
                        },
                        new
                        {
                            idVagas = 9,
                            idConhecimentos = 4,
                            idNivel = 3
                        },
                        new
                        {
                            idVagas = 10,
                            idConhecimentos = 5,
                            idNivel = 4
                        },
                        new
                        {
                            idVagas = 10,
                            idConhecimentos = 6,
                            idNivel = 5
                        },
                        new
                        {
                            idVagas = 11,
                            idConhecimentos = 7,
                            idNivel = 1
                        },
                        new
                        {
                            idVagas = 11,
                            idConhecimentos = 8,
                            idNivel = 2
                        },
                        new
                        {
                            idVagas = 12,
                            idConhecimentos = 9,
                            idNivel = 3
                        },
                        new
                        {
                            idVagas = 12,
                            idConhecimentos = 10,
                            idNivel = 4
                        },
                        new
                        {
                            idVagas = 13,
                            idConhecimentos = 11,
                            idNivel = 5
                        },
                        new
                        {
                            idVagas = 13,
                            idConhecimentos = 12,
                            idNivel = 1
                        },
                        new
                        {
                            idVagas = 14,
                            idConhecimentos = 13,
                            idNivel = 2
                        },
                        new
                        {
                            idVagas = 14,
                            idConhecimentos = 14,
                            idNivel = 3
                        },
                        new
                        {
                            idVagas = 15,
                            idConhecimentos = 15,
                            idNivel = 4
                        },
                        new
                        {
                            idVagas = 15,
                            idConhecimentos = 1,
                            idNivel = 5
                        });
                });

            modelBuilder.Entity("UIJobsAPI.Models.VagaIdioma", b =>
                {
                    b.Property<int>("idVagas")
                        .HasColumnType("int");

                    b.Property<int>("idIdiomas")
                        .HasColumnType("int");

                    b.Property<int>("idNivel")
                        .HasColumnType("int");

                    b.HasKey("idVagas", "idIdiomas");

                    b.HasIndex("idIdiomas");

                    b.HasIndex("idNivel");

                    b.ToTable("VagasIdiomas");

                    b.HasData(
                        new
                        {
                            idVagas = 1,
                            idIdiomas = 1,
                            idNivel = 2
                        },
                        new
                        {
                            idVagas = 1,
                            idIdiomas = 2,
                            idNivel = 3
                        },
                        new
                        {
                            idVagas = 2,
                            idIdiomas = 3,
                            idNivel = 1
                        },
                        new
                        {
                            idVagas = 2,
                            idIdiomas = 4,
                            idNivel = 2
                        },
                        new
                        {
                            idVagas = 3,
                            idIdiomas = 5,
                            idNivel = 3
                        },
                        new
                        {
                            idVagas = 3,
                            idIdiomas = 6,
                            idNivel = 1
                        },
                        new
                        {
                            idVagas = 4,
                            idIdiomas = 7,
                            idNivel = 2
                        },
                        new
                        {
                            idVagas = 4,
                            idIdiomas = 8,
                            idNivel = 3
                        },
                        new
                        {
                            idVagas = 5,
                            idIdiomas = 9,
                            idNivel = 1
                        },
                        new
                        {
                            idVagas = 5,
                            idIdiomas = 10,
                            idNivel = 2
                        },
                        new
                        {
                            idVagas = 6,
                            idIdiomas = 11,
                            idNivel = 3
                        },
                        new
                        {
                            idVagas = 6,
                            idIdiomas = 12,
                            idNivel = 1
                        },
                        new
                        {
                            idVagas = 7,
                            idIdiomas = 13,
                            idNivel = 2
                        },
                        new
                        {
                            idVagas = 7,
                            idIdiomas = 14,
                            idNivel = 3
                        },
                        new
                        {
                            idVagas = 8,
                            idIdiomas = 15,
                            idNivel = 1
                        },
                        new
                        {
                            idVagas = 8,
                            idIdiomas = 1,
                            idNivel = 4
                        },
                        new
                        {
                            idVagas = 9,
                            idIdiomas = 2,
                            idNivel = 5
                        },
                        new
                        {
                            idVagas = 9,
                            idIdiomas = 3,
                            idNivel = 1
                        },
                        new
                        {
                            idVagas = 10,
                            idIdiomas = 4,
                            idNivel = 2
                        },
                        new
                        {
                            idVagas = 10,
                            idIdiomas = 5,
                            idNivel = 3
                        },
                        new
                        {
                            idVagas = 11,
                            idIdiomas = 6,
                            idNivel = 4
                        },
                        new
                        {
                            idVagas = 11,
                            idIdiomas = 7,
                            idNivel = 5
                        },
                        new
                        {
                            idVagas = 12,
                            idIdiomas = 8,
                            idNivel = 1
                        },
                        new
                        {
                            idVagas = 12,
                            idIdiomas = 9,
                            idNivel = 2
                        },
                        new
                        {
                            idVagas = 13,
                            idIdiomas = 10,
                            idNivel = 3
                        },
                        new
                        {
                            idVagas = 13,
                            idIdiomas = 11,
                            idNivel = 4
                        },
                        new
                        {
                            idVagas = 14,
                            idIdiomas = 12,
                            idNivel = 5
                        },
                        new
                        {
                            idVagas = 14,
                            idIdiomas = 13,
                            idNivel = 1
                        },
                        new
                        {
                            idVagas = 15,
                            idIdiomas = 14,
                            idNivel = 2
                        },
                        new
                        {
                            idVagas = 15,
                            idIdiomas = 15,
                            idNivel = 3
                        });
                });

            modelBuilder.Entity("UIJobsAPI.Models.BeneficioVaga", b =>
                {
                    b.HasOne("UIJobsAPI.Models.Beneficio", "Beneficio")
                        .WithMany()
                        .HasForeignKey("idBeneficio")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UIJobsAPI.Models.Vaga", "Vagas")
                        .WithMany()
                        .HasForeignKey("idVagas")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Beneficio");

                    b.Navigation("Vagas");
                });

            modelBuilder.Entity("UIJobsAPI.Models.CarreiraProfissional", b =>
                {
                    b.HasOne("UIJobsAPI.Models.Curriculo", "Curriculo")
                        .WithMany()
                        .HasForeignKey("idCurriculo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Curriculo");
                });

            modelBuilder.Entity("UIJobsAPI.Models.Curriculo", b =>
                {
                    b.HasOne("UIJobsAPI.Models.Candidato", "Candidato")
                        .WithMany()
                        .HasForeignKey("idCandidato")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UIJobsAPI.Models.Escolaridade", "Escolaridade")
                        .WithMany()
                        .HasForeignKey("idEscolaridade")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Candidato");

                    b.Navigation("Escolaridade");
                });

            modelBuilder.Entity("UIJobsAPI.Models.CurriculoConhecimento", b =>
                {
                    b.HasOne("UIJobsAPI.Models.Conhecimento", "Conhecimentos")
                        .WithMany()
                        .HasForeignKey("idConhecimentos")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UIJobsAPI.Models.Curriculo", "Curriculo")
                        .WithMany()
                        .HasForeignKey("idCurriculo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UIJobsAPI.Models.Nivel", "Nivel")
                        .WithMany()
                        .HasForeignKey("idNivel")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Conhecimentos");

                    b.Navigation("Curriculo");

                    b.Navigation("Nivel");
                });

            modelBuilder.Entity("UIJobsAPI.Models.CurriculoIdioma", b =>
                {
                    b.HasOne("UIJobsAPI.Models.Curriculo", "Curriculo")
                        .WithMany()
                        .HasForeignKey("idCurriculo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UIJobsAPI.Models.Idioma", "Idiomas")
                        .WithMany()
                        .HasForeignKey("idIdiomas")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UIJobsAPI.Models.Nivel", "Nivel")
                        .WithMany()
                        .HasForeignKey("idNivel")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Curriculo");

                    b.Navigation("Idiomas");

                    b.Navigation("Nivel");
                });

            modelBuilder.Entity("UIJobsAPI.Models.Empresa", b =>
                {
                    b.HasOne("UIJobsAPI.Models.Porte", "Porte")
                        .WithMany()
                        .HasForeignKey("idPortes")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Porte");
                });

            modelBuilder.Entity("UIJobsAPI.Models.EnderecoCandidato", b =>
                {
                    b.HasOne("UIJobsAPI.Models.Candidato", "Candidato")
                        .WithMany()
                        .HasForeignKey("idCandidato")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Candidato");
                });

            modelBuilder.Entity("UIJobsAPI.Models.EnderecoEmpresa", b =>
                {
                    b.HasOne("UIJobsAPI.Models.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("idEmpresa")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("UIJobsAPI.Models.FormacaoAcademica", b =>
                {
                    b.HasOne("UIJobsAPI.Models.Curriculo", "Curriculo")
                        .WithMany()
                        .HasForeignKey("idCurriculo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UIJobsAPI.Models.Curso", "Curso")
                        .WithMany()
                        .HasForeignKey("idCursos")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Curriculo");

                    b.Navigation("Curso");
                });

            modelBuilder.Entity("UIJobsAPI.Models.Vaga", b =>
                {
                    b.HasOne("UIJobsAPI.Models.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("idEmpresa")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UIJobsAPI.Models.Escolaridade", "Escolaridade")
                        .WithMany()
                        .HasForeignKey("idEscolaridade")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UIJobsAPI.Models.SituacaoVaga", "SituacaoVaga")
                        .WithMany()
                        .HasForeignKey("idSituacaoVaga")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Empresa");

                    b.Navigation("Escolaridade");

                    b.Navigation("SituacaoVaga");
                });

            modelBuilder.Entity("UIJobsAPI.Models.VagaCandidato", b =>
                {
                    b.HasOne("UIJobsAPI.Models.Curriculo", "Curriculo")
                        .WithMany()
                        .HasForeignKey("idCurriculo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UIJobsAPI.Models.Vaga", "Vagas")
                        .WithMany()
                        .HasForeignKey("idVagas")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Curriculo");

                    b.Navigation("Vagas");
                });

            modelBuilder.Entity("UIJobsAPI.Models.VagaConhecimento", b =>
                {
                    b.HasOne("UIJobsAPI.Models.Conhecimento", "Conhecimentos")
                        .WithMany()
                        .HasForeignKey("idConhecimentos")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UIJobsAPI.Models.Nivel", "Nivel")
                        .WithMany()
                        .HasForeignKey("idNivel")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UIJobsAPI.Models.Vaga", "Vagas")
                        .WithMany()
                        .HasForeignKey("idVagas")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Conhecimentos");

                    b.Navigation("Nivel");

                    b.Navigation("Vagas");
                });

            modelBuilder.Entity("UIJobsAPI.Models.VagaIdioma", b =>
                {
                    b.HasOne("UIJobsAPI.Models.Idioma", "Idioma")
                        .WithMany()
                        .HasForeignKey("idIdiomas")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UIJobsAPI.Models.Nivel", "Nivel")
                        .WithMany()
                        .HasForeignKey("idNivel")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UIJobsAPI.Models.Vaga", "Vagas")
                        .WithMany()
                        .HasForeignKey("idVagas")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Idioma");

                    b.Navigation("Nivel");

                    b.Navigation("Vagas");
                });
#pragma warning restore 612, 618
        }
    }
}
