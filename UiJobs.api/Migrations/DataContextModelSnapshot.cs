// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UIJobsAPI.Data;

#nullable disable

namespace UijobsApi.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("UIJobsAPI.Models.Beneficio", b =>
                {
                    b.Property<int>("idBeneficio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idBeneficio"));

                    b.Property<string>("nomeBeneficio")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("idBeneficio");

                    b.ToTable("Beneficio");
                });

            modelBuilder.Entity("UIJobsAPI.Models.BeneficioVaga", b =>
                {
                    b.Property<int>("idVagas")
                        .HasColumnType("int");

                    b.Property<int>("idBeneficio")
                        .HasColumnType("int");

                    b.HasKey("idVagas", "idBeneficio");

                    b.HasIndex("idBeneficio");

                    b.HasIndex("idVagas", "idBeneficio");

                    b.ToTable("BeneficioVagas");
                });

            modelBuilder.Entity("UIJobsAPI.Models.Candidato", b =>
                {
                    b.Property<int>("idCandidato")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idCandidato"));

                    b.Property<DateTime>("dataNascimento")
                        .HasColumnType("datetime2");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("nome")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("nomeMae")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("idCandidato");

                    b.HasIndex("email");

                    b.ToTable("Candidato");
                });

            modelBuilder.Entity("UIJobsAPI.Models.CarreiraProfissional", b =>
                {
                    b.Property<int>("sqCarreiraProfissional")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("sqCarreiraProfissional"));

                    b.Property<string>("cargo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("idCurriculo")
                        .HasColumnType("int");

                    b.Property<string>("nomeEmpresa")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("tempoFim")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("tempoInicio")
                        .HasColumnType("datetime2");

                    b.HasKey("sqCarreiraProfissional");

                    b.HasIndex("idCurriculo");

                    b.ToTable("CarreiraProfissional");
                });

            modelBuilder.Entity("UIJobsAPI.Models.Conhecimento", b =>
                {
                    b.Property<int>("idConhecimentos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idConhecimentos"));

                    b.Property<string>("nomeConhecimento")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("idConhecimentos");

                    b.ToTable("Conhecimentos");
                });

            modelBuilder.Entity("UIJobsAPI.Models.Curriculo", b =>
                {
                    b.Property<int>("idCurriculo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idCurriculo"));

                    b.Property<DateTime>("dcCurriculo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("duCurriculo")
                        .HasColumnType("datetime2");

                    b.Property<int>("idCandidato")
                        .HasColumnType("int");

                    b.Property<int>("idEscolaridade")
                        .HasColumnType("int");

                    b.Property<string>("objetivo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("idCurriculo");

                    b.HasIndex("idCandidato");

                    b.HasIndex("idEscolaridade");

                    b.ToTable("Curriculo");
                });

            modelBuilder.Entity("UIJobsAPI.Models.CurriculoConhecimento", b =>
                {
                    b.Property<int>("idCurriculo")
                        .HasColumnType("int");

                    b.Property<int>("idConhecimentos")
                        .HasColumnType("int");

                    b.Property<int>("idNivel")
                        .HasColumnType("int");

                    b.HasKey("idCurriculo", "idConhecimentos");

                    b.HasIndex("idConhecimentos");

                    b.HasIndex("idNivel");

                    b.HasIndex("idCurriculo", "idConhecimentos");

                    b.ToTable("CurriculoConhecimentos");
                });

            modelBuilder.Entity("UIJobsAPI.Models.CurriculoIdioma", b =>
                {
                    b.Property<int>("idCurriculo")
                        .HasColumnType("int");

                    b.Property<int>("idIdiomas")
                        .HasColumnType("int");

                    b.Property<int>("idNivel")
                        .HasColumnType("int");

                    b.HasKey("idCurriculo", "idIdiomas");

                    b.HasIndex("idIdiomas");

                    b.HasIndex("idNivel");

                    b.HasIndex("idCurriculo", "idIdiomas");

                    b.ToTable("CurriculoIdiomas");
                });

            modelBuilder.Entity("UIJobsAPI.Models.Curso", b =>
                {
                    b.Property<int>("idCursos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idCursos"));

                    b.Property<string>("DiplomaCurso")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("nomeCurso")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.HasKey("idCursos");

                    b.HasIndex("DiplomaCurso");

                    b.ToTable("Cursos");
                });

            modelBuilder.Entity("UIJobsAPI.Models.Empresa", b =>
                {
                    b.Property<int>("idEmpresa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idEmpresa"));

                    b.Property<string>("cnpj")
                        .IsRequired()
                        .HasMaxLength(19)
                        .HasColumnType("nvarchar(19)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("idPortes")
                        .HasColumnType("int");

                    b.Property<string>("nomeFantasia")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("razaoSocial")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("idEmpresa");

                    b.HasIndex("idPortes");

                    b.ToTable("Empresa");
                });

            modelBuilder.Entity("UIJobsAPI.Models.EnderecoCandidato", b =>
                {
                    b.Property<int>("idCandidato")
                        .HasColumnType("int");

                    b.Property<string>("bairro")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("cep")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("cidade")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("complemento")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("endereco")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("logradouro")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("numero")
                        .HasColumnType("int");

                    b.Property<string>("uf")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.HasKey("idCandidato");

                    b.HasIndex("idCandidato");

                    b.ToTable("EnderecoCandidato");
                });

            modelBuilder.Entity("UIJobsAPI.Models.EnderecoEmpresa", b =>
                {
                    b.Property<int>("idEmpresa")
                        .HasColumnType("int");

                    b.Property<string>("bairro")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("cep")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("cidade")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("complemento")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("endereco")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("logradouro")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("numero")
                        .HasColumnType("int");

                    b.Property<string>("uf")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.HasKey("idEmpresa");

                    b.HasIndex("idEmpresa");

                    b.ToTable("EnderecoEmpresa");
                });

            modelBuilder.Entity("UIJobsAPI.Models.Escolaridade", b =>
                {
                    b.Property<int>("idEscolaridade")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idEscolaridade"));

                    b.Property<string>("nomeEscolaridade")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("idEscolaridade");

                    b.ToTable("Escolaridade");
                });

            modelBuilder.Entity("UIJobsAPI.Models.FormacaoAcademica", b =>
                {
                    b.Property<int>("idFormacaoAcademica")
                        .HasColumnType("int");

                    b.Property<int>("idCurriculo")
                        .HasColumnType("int");

                    b.Property<DateTime>("dfCurso")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("diCurso")
                        .HasColumnType("datetime2");

                    b.Property<int>("idCursos")
                        .HasColumnType("int");

                    b.HasKey("idFormacaoAcademica", "idCurriculo");

                    b.HasIndex("idCurriculo");

                    b.HasIndex("idCursos");

                    b.ToTable("FormacaoAcademica");
                });

            modelBuilder.Entity("UIJobsAPI.Models.Idioma", b =>
                {
                    b.Property<int>("idIdiomas")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idIdiomas"));

                    b.Property<string>("nomeIdioma")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("idIdiomas");

                    b.ToTable("Idiomas");
                });

            modelBuilder.Entity("UIJobsAPI.Models.Nivel", b =>
                {
                    b.Property<int>("idNivel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idNivel"));

                    b.Property<string>("niveisDisponiveis")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("idNivel");

                    b.ToTable("Nivel");
                });

            modelBuilder.Entity("UIJobsAPI.Models.Porte", b =>
                {
                    b.Property<int>("idPortes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idPortes"));

                    b.Property<string>("tiposPortes")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("idPortes");

                    b.ToTable("Portes");
                });

            modelBuilder.Entity("UIJobsAPI.Models.SituacaoVaga", b =>
                {
                    b.Property<int>("idSituacaoVaga")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idSituacaoVaga"));

                    b.Property<string>("situacaoAtual")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("idSituacaoVaga");

                    b.ToTable("SituacaoVaga");
                });

            modelBuilder.Entity("UIJobsAPI.Models.Vaga", b =>
                {
                    b.Property<int>("idVagas")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idVagas"));

                    b.Property<short>("cargaHoraria")
                        .HasColumnType("smallint");

                    b.Property<string>("cargo")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("descricao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("finalVigencia")
                        .HasColumnType("datetime2");

                    b.Property<int>("idEmpresa")
                        .HasColumnType("int");

                    b.Property<int>("idEscolaridade")
                        .HasColumnType("int");

                    b.Property<int>("idSituacaoVaga")
                        .HasColumnType("int");

                    b.Property<DateTime>("inicioVigencia")
                        .HasColumnType("datetime2");

                    b.Property<string>("localidade")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<float>("percAderencia")
                        .HasColumnType("real");

                    b.Property<float?>("salario")
                        .HasColumnType("real");

                    b.Property<string>("tempoSemanal")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("idVagas");

                    b.HasIndex("idEmpresa");

                    b.HasIndex("idEscolaridade");

                    b.HasIndex("idSituacaoVaga");

                    b.ToTable("Vagas");
                });

            modelBuilder.Entity("UIJobsAPI.Models.VagaCandidato", b =>
                {
                    b.Property<int>("idCurriculo")
                        .HasColumnType("int");

                    b.Property<int>("idVagas")
                        .HasColumnType("int");

                    b.Property<DateTime>("dcCurriculo")
                        .HasColumnType("datetime2");

                    b.Property<float>("percAderencia")
                        .HasColumnType("real");

                    b.Property<string>("vtCandidato")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("vtEmpresa")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.HasKey("idCurriculo", "idVagas");

                    b.HasIndex("idVagas");

                    b.ToTable("VagasCandidato");
                });

            modelBuilder.Entity("UIJobsAPI.Models.VagaConhecimento", b =>
                {
                    b.Property<int>("idVagas")
                        .HasColumnType("int");

                    b.Property<int>("idConhecimentos")
                        .HasColumnType("int");

                    b.Property<int>("idNivel")
                        .HasColumnType("int");

                    b.HasKey("idVagas", "idConhecimentos");

                    b.HasIndex("idConhecimentos");

                    b.HasIndex("idNivel");

                    b.ToTable("VagasConhecimentos");
                });

            modelBuilder.Entity("UIJobsAPI.Models.VagaIdioma", b =>
                {
                    b.Property<int>("idVagas")
                        .HasColumnType("int");

                    b.Property<int>("idIdiomas")
                        .HasColumnType("int");

                    b.Property<int>("idNivel")
                        .HasColumnType("int");

                    b.HasKey("idVagas", "idIdiomas");

                    b.HasIndex("idIdiomas");

                    b.HasIndex("idNivel");

                    b.ToTable("VagasIdiomas");
                });

            modelBuilder.Entity("UIJobsAPI.Models.BeneficioVaga", b =>
                {
                    b.HasOne("UIJobsAPI.Models.Beneficio", "Beneficio")
                        .WithMany()
                        .HasForeignKey("idBeneficio")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UIJobsAPI.Models.Vaga", "Vagas")
                        .WithMany()
                        .HasForeignKey("idVagas")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Beneficio");

                    b.Navigation("Vagas");
                });

            modelBuilder.Entity("UIJobsAPI.Models.CarreiraProfissional", b =>
                {
                    b.HasOne("UIJobsAPI.Models.Curriculo", "Curriculo")
                        .WithMany()
                        .HasForeignKey("idCurriculo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Curriculo");
                });

            modelBuilder.Entity("UIJobsAPI.Models.Curriculo", b =>
                {
                    b.HasOne("UIJobsAPI.Models.Candidato", "Candidato")
                        .WithMany()
                        .HasForeignKey("idCandidato")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UIJobsAPI.Models.Escolaridade", "Escolaridade")
                        .WithMany()
                        .HasForeignKey("idEscolaridade")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Candidato");

                    b.Navigation("Escolaridade");
                });

            modelBuilder.Entity("UIJobsAPI.Models.CurriculoConhecimento", b =>
                {
                    b.HasOne("UIJobsAPI.Models.Conhecimento", "Conhecimentos")
                        .WithMany()
                        .HasForeignKey("idConhecimentos")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UIJobsAPI.Models.Curriculo", "Curriculo")
                        .WithMany()
                        .HasForeignKey("idCurriculo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UIJobsAPI.Models.Nivel", "Nivel")
                        .WithMany()
                        .HasForeignKey("idNivel")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Conhecimentos");

                    b.Navigation("Curriculo");

                    b.Navigation("Nivel");
                });

            modelBuilder.Entity("UIJobsAPI.Models.CurriculoIdioma", b =>
                {
                    b.HasOne("UIJobsAPI.Models.Curriculo", "Curriculo")
                        .WithMany()
                        .HasForeignKey("idCurriculo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UIJobsAPI.Models.Idioma", "Idiomas")
                        .WithMany()
                        .HasForeignKey("idIdiomas")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UIJobsAPI.Models.Nivel", "Nivel")
                        .WithMany()
                        .HasForeignKey("idNivel")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Curriculo");

                    b.Navigation("Idiomas");

                    b.Navigation("Nivel");
                });

            modelBuilder.Entity("UIJobsAPI.Models.Empresa", b =>
                {
                    b.HasOne("UIJobsAPI.Models.Porte", "Porte")
                        .WithMany()
                        .HasForeignKey("idPortes")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Porte");
                });

            modelBuilder.Entity("UIJobsAPI.Models.EnderecoCandidato", b =>
                {
                    b.HasOne("UIJobsAPI.Models.Candidato", "Candidato")
                        .WithMany()
                        .HasForeignKey("idCandidato")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Candidato");
                });

            modelBuilder.Entity("UIJobsAPI.Models.EnderecoEmpresa", b =>
                {
                    b.HasOne("UIJobsAPI.Models.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("idEmpresa")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("UIJobsAPI.Models.FormacaoAcademica", b =>
                {
                    b.HasOne("UIJobsAPI.Models.Curriculo", "Curriculo")
                        .WithMany()
                        .HasForeignKey("idCurriculo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UIJobsAPI.Models.Curso", "Curso")
                        .WithMany()
                        .HasForeignKey("idCursos")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Curriculo");

                    b.Navigation("Curso");
                });

            modelBuilder.Entity("UIJobsAPI.Models.Vaga", b =>
                {
                    b.HasOne("UIJobsAPI.Models.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("idEmpresa")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UIJobsAPI.Models.Escolaridade", "Escolaridade")
                        .WithMany()
                        .HasForeignKey("idEscolaridade")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UIJobsAPI.Models.SituacaoVaga", "SituacaoVaga")
                        .WithMany()
                        .HasForeignKey("idSituacaoVaga")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Empresa");

                    b.Navigation("Escolaridade");

                    b.Navigation("SituacaoVaga");
                });

            modelBuilder.Entity("UIJobsAPI.Models.VagaCandidato", b =>
                {
                    b.HasOne("UIJobsAPI.Models.Curriculo", "Curriculo")
                        .WithMany()
                        .HasForeignKey("idCurriculo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UIJobsAPI.Models.Vaga", "Vagas")
                        .WithMany()
                        .HasForeignKey("idVagas")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Curriculo");

                    b.Navigation("Vagas");
                });

            modelBuilder.Entity("UIJobsAPI.Models.VagaConhecimento", b =>
                {
                    b.HasOne("UIJobsAPI.Models.Conhecimento", "Conhecimentos")
                        .WithMany()
                        .HasForeignKey("idConhecimentos")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UIJobsAPI.Models.Nivel", "Nivel")
                        .WithMany()
                        .HasForeignKey("idNivel")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UIJobsAPI.Models.Vaga", "Vagas")
                        .WithMany()
                        .HasForeignKey("idVagas")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Conhecimentos");

                    b.Navigation("Nivel");

                    b.Navigation("Vagas");
                });

            modelBuilder.Entity("UIJobsAPI.Models.VagaIdioma", b =>
                {
                    b.HasOne("UIJobsAPI.Models.Idioma", "Idioma")
                        .WithMany()
                        .HasForeignKey("idIdiomas")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UIJobsAPI.Models.Nivel", "Nivel")
                        .WithMany()
                        .HasForeignKey("idNivel")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UIJobsAPI.Models.Vaga", "Vagas")
                        .WithMany()
                        .HasForeignKey("idVagas")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Idioma");

                    b.Navigation("Nivel");

                    b.Navigation("Vagas");
                });
#pragma warning restore 612, 618
        }
    }
}
